---
metadata:
  description:
  credits:
img4_tags:
  acfw:
    description:
  ache:
    description:
  acib:
    description:
  aciw:
    description:
  ader:
    description:
  agfi:
    description:
  almo:
    description:
  AMNM:
    description: allow mix-n-match
    type: boolean
  anef:
    description: Apple Neural Engine Firmware
  anrd:
    description:
  aofi:
    description:
  aopf:
    description: Always on processor firmware
  apmv:
    description:
  ater:
    description:
  atkh:
    description:
  auac:
    description:
  aubt:
    description:
  augs:
    description: Included in APTicket CA extensions
  aupr:
    description:
  auxi:
    title: Auxiliary Kernel Collection (AuxKC) Image4 Manifest Hash (`auxi`)
    description: >
      After the system verifies that the UAKL hash matches what’s found in the `auxp` field of the
      LocalPolicy, it requests that the AuxKC be signed by the Secure Enclave processor application that’s
      responsible for LocalPolicy signing. Next, an SHA384 hash of the AuxKC Image4 manifest signature is placed
      into the LocalPolicy to avoid the potential for mixing and matching previously signed AuxKCs to an operating
      system at boot time. If iBoot finds the auxi field in the LocalPolicy, it attempts to load the AuxKC from
      storage and validate its signature. It also verifies that the hash of the Image4 manifest attached to the
      AuxKC matches the value found in the auxi field. If the AuxKC fails to load for any reason, the system
      continues to boot without this boot object and (so) without any third-party kexts loaded. The auxp field
      is a prerequisite for setting the auxi field in the LocalPolicy. Users change the auxi value implicitly
      when they change the UAKL by approving a kext from the Security & Privacy pane in System Preferences.
    type: binary
    subtype: sha2-384
    access:
      write:
        - macOS
  auxk:
    description: Auxiliary Kernel Cache
  auxp:
    title: Auxiliary Kernel Collection (AuxKC) Policy Hash (auxp)
    description: >
      The `auxp` is an SHA384 hash of the user-authorized kext list (UAKL) policy. This is used at
      AuxKC generation time to help ensure that only user-authorized kexts are included in the AuxKC. `smb2`
      is a prerequisite for setting this field. Users change the `auxp` value implicitly when they change the
      UAKL by approving a kext from the Security & Privacy pane in System Preferences.
    type: binary
    subtype: sha2-384
    access:
      write:
        - macOS
  auxr:
    title: Auxiliary Kernel Collection (AuxKC) Receipt Hash (auxr)
    description: >
      The `auxr` is an SHA384 hash of the AuxKC receipt, which indicates the exact set of kexts that
      were included into the AuxKC. The AuxKC receipt can be a subset of the UAKL, because kexts can be excluded
      from the AuxKC even if they’re user authorized if they’re known to be used for attacks. In addition,
      some kexts that can be used to break the user-kernel boundary may lead to decreased functionality,
      such as an inability to use Apple Pay or play 4K and HDR content. Users who want these capabilities
      opt in to a more restrictive AuxKC inclusion. The auxp field is a prerequisite for setting the auxr
      field in the LocalPolicy. Users change the auxr value implicitly when they build a new AuxKC from
      the Security & Privacy pane in System Preferences.
    type: binary
    subtype: sha2-384
    access:
      write:
        - macOS
  avef:
    description: AV Encryption (DRM) Firmware
  bat0:
    description: battery image 0
  bat1:
    description: battery image 1
  batf:
    description: battery full image
  BLDS:
    description:

  prid:
    description: Encrypted Private Key / Private Key Info
  bles:
    description:
  BNCH:
    description: Boot Nonce Hash - based on the values of com.apple.System.boot-nonces
  BORD:
    description: |-
      The board the chip is attached to.  With iPhones/iPads this is the variation between device sizes (occasionally
      also used for low cost devices like the SE/XR).  This is usually expressed as a hex encoded uint8_t.  Some
      types of board seem to encode a bitfield for non MP (mainline production) boards such as EVT/DVT

      With the T2 this value is unique to all MacBooks with the T2.
    type: integer
    alias:
      - board-id
  bstc:
    description:
  bsys:
    description:
  CEPO:
    description: |-
      Certificate/Chip Epoch.  This is a unit of roll-forward time (monotonic) that allows for any security issues
      in the prior epoch to be fixed by a anti-rollback scheme.
    alias:
      - chip-epoch
  cfel:
    description:
  chg0:
    description: Charging Image 0
  faic:
    description:
    type: integer
    default: 0
  chg1:
    description: Charging Image 1
  CHIP:
    description: Unique identifier for a single Apple designed application processor
      sharing the same GID key
    width: 2
  nsph:
    description: preboot splat manifest hash
  CHMH:
    description: chained manifest hash
  cker:
    description:
  ckih:
    description:
  cmsv:
    description:
  coih:
    title: CustomOS Image4 Manifest Hash (coih)
    description: >
      The `coih` is an SHA384 hash of CustomOS Image4 manifest. The payload for that manifest is used
      by iBoot (instead of the XNU kernel) to transfer control. Users change the `coih` value implicitly when
      they use the `kmutil` configure-boot command-line tool in 1TR.
    type: binary
    subtype: sha2-384
    access:
      write:
        - 1TR
  CPRO:
    description: Chip promotion fuse value (what is burned in)
    alias:
      - certificate-production-status
    type: boolean
  CSEC:
    description: Burned-in chip security mode
    alias:
      - certificate-security-mode
  csys:
    description:
  dali:
    description:
  data:
    description:
  DGST:
    description: payload digest
  diag:
    description:
  disk:
    description:
  DPRO:
    description:
  DSEC:
    description:
  dtre:
    description: device tree
  dtrs:
    description: device tree for recovery
  ECID:
    description: Exclusive chip identifier.  This is burned into an eFuse at time
      of manufacture and unique across all devices sharing the same CHIP
    width: 8
  efib:
    description:
  eg0n:
    description: Effective GID 0 Nonce
  eg0t:
    description:
  eg1n:
    description: Effective GID 1 Nonce
  eg1t:
    description:
  eg3n:
    description: Effective GID3 Nonce
  eg3t:
    description:
  EKEY:
    description: Effective chip promoted
  EPRO:
    description: Effective chip promotion / demotion state (if CPFM 03 this must be 0 to set ESEC)
    alias:
      - effective-production-status-ap
  esca:
    description:
  hrlp:
    title: Has Secure Enclave Signed recoveryOS Local Policy (hrlp)
    description: >
      The `hrlp` indicates whether or not the `prot` value is the measurement of a Secure Enclave–signed
      recoveryOS LocalPolicy. If not, then the recoveryOS LocalPolicy is signed by the Apple online signing server,
      which signs things such as macOS Image4 files.
    type: boolean
    access:
      write:
        - 1TR
        - recoveryOS
        - macOS
  esdm:
    description: Extended Security Domain fuses
    alias:
      - esdm-fuses
  styp:
    description: Crytpex Subtype
    type: u32
    alias:
      - cryptex subtype
  oppd:
    description: Unknown, used by `stg1`/`sepi` - sha384 hash sized
  ESEC:
    description: Effective security mode
    alias:
      - effective-security-mode-ap
  euou:
    description: engineering use-only unit
  clas:
    description: product class (often used in FDR specificatons)
  psmh:
    description: previous stage manifest hash
  fchp:
    description: Cryptex1,ChipID
  fdrs:
    description:
  fdrt:
    description:
  file:
    description:
  fpgt:
    description:
  ftap:
    description:
  ftot:
    description:
  ftsp:
    description:
  fuos:
    description: Fully Unsigned OS
  gfxf:
    description: Graphics Firmware
  ging:
    description:
  glyc:
    description:
  glyp:
    description:
  hash:
    description:
  hclo:
    description:
  hime:
    description:
  hmmr:
    description:
  homr:
    description:
  hrlp:
    description:
  hypr:
    description: Hypervisor
  iBEC:
    description: iBoot Epoch Change
  iBoot:
    description: iBoot
  iBSS:
    description: iBoot Second Stage
  ienv:
    description:
  LLB:
    description: Low Level iBoot
  IM4M:
    description:
  IM4P:
    description:
  IM4R:
    description:
  IMG4:
    description:
  ipdf:
    description:
  isor:
    description:
  ispf:
    description: Image Signal Processor Firmware
  isys:
    description: iBridge System
  itst:
    description:
  iuob:
    description:
  iuos:
    description:
  iuou:
    description:
  kdlv:
    description:
  krnl:
    description: Kernel
  kuid:
    title: Key encryption key (KEK) Group UUID (kuid)
    description: >
      The kuid indicates the volume that was booted. The key encryption key has typically been used
      for Data Protection. For each LocalPolicy, it’s used to protect the LocalPolicy signing key. The
      kuid is set by the user implicitly when creating a new operating system install.
    type: binary
    subtype: sha2-384
    access:
      write:
        - 1TR
        - recoveryOS
        - macOS
  lamo:
    description:
  lckr:
    description:
  LNCH:
    description:
  lobo:
    description: Local Boot
  logo:
    description: Apple logo image
  love:
    title: Local Operating System Version (love)
    description: >
      The love indicates the OS version that the LocalPolicy is created for. The version is obtained from the
      next state manifest during LocalPolicy creation and is used to enforce recoveryOS pairing restrictions.
    type: string
    example: "21.3.66.0.0,0"
    access:
      write:
        - 1TR
        - recoveryOS
        - macOS
  prtp:
    description: Product ID String
    type: string
    example: iPhone16,2
  sdkp:
    description: SEP Product Type
    type: string
    example: iphoneos
  lphp:
    description:
  lpnh:
    title: LocalPolicy Nonce Hash (lpnh)
    description: >
      The lpnh is used for anti-replay of the LocalPolicy. This is an SHA384 hash of the LocalPolicy Nonce
      (LPN), which is stored in the Secure Storage Component and accessible using the Secure Enclave Boot
      ROM or Secure Enclave. The raw nonce is never visible to the Application Processor, only to the
      sepOS. An attacker wanting to convince LLB that a previous LocalPolicy they had captured was valid
      would need to place a value into the Secure Storage Component, which hashes to the same lpnh value
      found in the LocalPolicy they want to replay. Normally there is a single LPN valid on the system—except
      during software updates, when two are simultaneously valid—to allow for the possibility of falling back
      to booting the old software in the event of an update error. When any LocalPolicy for any operating
      system is changed, all policies are re-signed with the new lpnh value corresponding to the new LPN
      found in the Secure Storage Component. This change happens when the user changes security settings
      or creates new operating systems with a new LocalPolicy for each.
    type: binary
    subtype: sha2-384
    access:
      write:
        - 1TR
        - recoveryOS
        - macOS
  lpol:
    description: Local Policy
  ltrs:
    description:
  magg:
    description:
  MANB:
    description:
  MANP:
    description: Manifest Payload
  manx:
    description:
  mefi:
    description: MacEFI (T2 firmware for Intel chip)
  ment:
    description:
  mmap:
    description:
  mmer:
    description:
  mmsv:
    description:
  mpro:
    description:
  msec:
    description:
  msys:
    description:
  mtfw:
    description:
  name:
    description:
  nrde:
    description:
  nsih:
    description: Next Stage Image Hash
  nsrv:
    description:
  OBJP:
    description:
  omer:
    description:
  ooth:
    description:
  osev:
    description:
  osrd:
    description:
  otes:
    description:
  owns:
    description:
  PAYP:
    description:
  pcrp:
    description: Production certificate root
  pdmg:
    description: Personalized Disk Image
  pert:
    description:
  pfle:
    description:
  pflp:
    description:
  phlt:
    description:
  pmpf:
    description: Power Management Processor Firmware
  pndp:
    description:
  prot:
    title: Paired recoveryOS Trusted Boot Policy Measurement (prot)
    description: >
      A paired recoveryOS Trusted Boot Policy Measurement (TBPM) is a special iterative SHA384 hash calculation
      over the Image4 manifest of a LocalPolicy, excluding nonces, in order to give a consistent measurement
      over time (because nonces like lpnh are frequently updated). The prot field, which is found only in each
      macOS LocalPolicy, provides a pairing to indicate the recoveryOS LocalPolicy that corresponds to the
      macOS LocalPolicy.
    type: binary
    subtype: sha2-384
    access:
      write:
        - 1TR
        - recoveryOS
        - macOS
  rbmt:
    description:
  rddg:
    description:
  rdsk:
    description: Restore Disk Image
  rdtr:
    description:
  recm:
    description:
  rfta:
    description:
  rfts:
    description:
  rkrn:
    description: restore kernel
  rlgo:
    description:
  RNCH:
    description:
  rolp:
    description: recoveryOS local policy
  ronh:
    title: recoveryOS Nonce Hash (ronh)
    description: >
      The ronh behaves the same way as the lpnh, but is found exclusively in the LocalPolicy for system
      recoveryOS. It’s updated when the system recoveryOS is updated, such as on software updates. A
      separate nonce from the lpnh and rpnh is used so that when a device is put into a disabled state
      by Find My, existing operating systems can be disabled (by removing their LPN and RPN from the
      Secure Storage Component), while still leaving the system recoveryOS bootable. In this way, the
      operating systems can be reenabled when the system owner proves their control over the system by
      putting in their iCloud password used for the Find My account. This change happens when a user updates
      the system recoveryOS or creates new operating systems.
    type: binary
    subtype: sha2-384
    access:
      write:
        - 1TR
        - recoveryOS
        - macOS
  rosi:
    description:
  nish:
    title: Next Stage Image4 Manifest Hash (nsih)
    description: >
      The nsih field represents an SHA384 hash of the Image4 manifest data structure that describes the booted
      macOS. The macOS Image4 manifest contains measurements for all the boot objects—such as iBoot, the static
      trust cache, device tree, Boot Kernel Collection, and signed system volume (SSV) volume root hash. When
      LLB is directed to boot a given macOS, it’s designed to ensure that the hash of the macOS Image4 manifest
      attached to iBoot matches what’s captured in the nsih field of the LocalPolicy. In this way, the nsih
      captures the user intention of what operating system the user has created a LocalPolicy for. Users
      change the nsih value implicitly when they perform a software update.
    type: binary
    subtype: sha2-384
    access:
      write:
        - 1TR
        - recoveryOS
        - macOS
  spih:
    description: Cryptex1 Image4 Hash
  stng:
    description: Cryptex1 Generation
  auxh:
    description: User Authorized Kext List Hash
  rpnh:
    title: Remote Policy Nonce Hash (rpnh)
    description: >
      The rpnh behaves the same way as the lpnh but is updated only when the remote policy is updated, such as when
      changing the state of Find My enrollment. This change happens when the user changes the state of Find My on
      their Mac.
    type: binary
    subtype: sha2-384
    access:
      write:
        - 1TR
        - recoveryOS
        - macOS
  RSCH:
    description: Research mode
  fgpt:
    description: factory pre-release global trust
  UDID:
    description: universal device identifier
  rsch:
    description: research mode
  vnum:
    description: maximum restore version
    type: string
  rsep:
    description: Restore SEP Image, paired with oppd/tbms
    type: string
    encoding: sha2-384
  rso0:
    description:
  rso1:
    description:
  rso2:
    description:
  rso3:
    description:
  rtpf:
    description:
  rtsc:
    description:
  scef:
    description:
  SDOM:
    description: |-
      Security domain, or which set of certificates govern device security.

      Known values:
        0x01 - Main Production certificates
    width: 2
    alias:
      - security-domain
  SECM:
    description:
  seid:
    description: Secure Enclave ID
  stg1:
    description: stage 1 bootloader
    type: string
    encoding: sha2-384
  sepi:
    description: SEP Image, contains oppd and tbms in seal
    type: string
    encoding: sha2-384
  sika:
    description:
  siof:
    description: Smart IO Firmware
  sip0:
    description: System Integrity Protection (SIP) 0 Status - Overall
  sip1:
    description: System Integrity Protection (SIP) 1 Status - Signed System Volume Status
  sip2:
    description: System Integrity Protection (SIP) 2 Status - Kernel CTRR Status
  sip3:
    description: System Integrity Protection (SIP) 3 Status - Boot Args Filtering Status
  slvn:
    description:
  smb0:
    description: Secure Multi-Boot 0 - Security Mode - Full Security, Reduced, Disabled
  smb1:
    description: Secure Multi-Boot 1
  smb2:
    description: Secure Multi-Boot 2 - 3rd Party Kexts Status
  smb3:
    description: Secure Multi-Boot 3 - User-allowed MDM Control
  smb4:
    description: Secure Multi-Boot 3 - DEP-allowed MDM Control
  SNON:
    description: SEP Nonce
  snon:
    description: SEP Nonce
  snuf:
    description:
  srnm:
    description:
  ster:
    description:
  svrn:
    description: Server nonce
  tbmr:
    description: Trusted Boot Measurement (Root?)
  tbms:
    description: Trusted Boot Measurement (Signature?)
    notes: Likely encrypted by the SEP and opaque to the AP
  tatp:
    description: Board Name (such as d84)
  tery:
    description:
  test:
    description:
  tics:
    description:
  trst:
    description: Trust Cache
  tsys:
    description:
  type:
    description: Cryptex Type
  ucer:
    description: User Cert
  ucon:
    description:
  udid:
    description: Unique Device ID
  uidm:
    description:
    type: boolean
  vice:
    description:
  vkdl:
    description:
  vuid:
    title: APFS volume group UUID (vuid)
    description: >
      The vuid indicates the volume group the kernel should use as root. This field is primarily informational
      and isn’t used for security constraints. This vuid is set by the user implicitly when creating a new
      operating system install.
    type: binary
    subtype: sha2-384
    access:
      - 1TR
      - recoveryOS
      - macOS
  ware:
    description:
  inst:
    descryption: The key or file to install
  wchf:
    description: Wireless Charging Framework
  xbtc:
    description: x86 Boot Trust Cache
  xsys:
    description: x86 System Root Hash
  xugs:
    description:
  SPTM:
    description: Secure Page Table Monitor
  WCHF:
    description: Wireless Charging Firmware
